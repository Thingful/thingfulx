// Code generated by protoc-gen-go. DO NOT EDIT.
// source: channels.proto

package thingfulx

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Visibility defines an access level for a resource using definitions provided
// by the ODI. Open means accessible without authentication, Shared is publicly
// accessible provided some registration and authentication process is followed,
// and Closed means the resource is private, only accessible with explicit
// permission.
type Visibility int32

const (
	Visibility_OPEN   Visibility = 0
	Visibility_SHARED Visibility = 1
	Visibility_CLOSED Visibility = 3
)

var Visibility_name = map[int32]string{
	0: "OPEN",
	1: "SHARED",
	3: "CLOSED",
}

var Visibility_value = map[string]int32{
	"OPEN":   0,
	"SHARED": 1,
	"CLOSED": 3,
}

func (x Visibility) String() string {
	return proto.EnumName(Visibility_name, int32(x))
}

func (Visibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6eb5b11d5b15e5ec, []int{0}
}

// The DataType enum is used to encode information about the data type of the
// values returned in the repeated Observations list.
type DataType int32

const (
	DataType_NUMBER    DataType = 0
	DataType_INTEGER   DataType = 1
	DataType_STRING    DataType = 2
	DataType_DATE_TIME DataType = 3
	DataType_TIME      DataType = 4
	DataType_BOOLEAN   DataType = 5
	DataType_UNKNOWN   DataType = 6
)

var DataType_name = map[int32]string{
	0: "NUMBER",
	1: "INTEGER",
	2: "STRING",
	3: "DATE_TIME",
	4: "TIME",
	5: "BOOLEAN",
	6: "UNKNOWN",
}

var DataType_value = map[string]int32{
	"NUMBER":    0,
	"INTEGER":   1,
	"STRING":    2,
	"DATE_TIME": 3,
	"TIME":      4,
	"BOOLEAN":   5,
	"UNKNOWN":   6,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6eb5b11d5b15e5ec, []int{1}
}

// Channel represents a single data channel being provided by an IoT device
// somewhere in the world.
type Channel struct {
	// URL contains a unique URL for the Channel that must be the URL at which the
	// Channel's data is available
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Title contains a unique (if possible) title for the Channel
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Description contains a human centered description of the Channel if
	// available.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Webpage contains a human centered web resource where information about the
	// specific device providing the Channel may be found
	Webpage string `protobuf:"bytes,4,opt,name=webpage,proto3" json:"webpage,omitempty"`
	// IndexedAt contains an RFC3339 timestamp showing when the Channel was indexed
	IndexedAt string `protobuf:"bytes,5,opt,name=indexed_at,json=indexedAt,proto3" json:"indexed_at,omitempty"`
	// Location contains the geographical location of the Channel
	Location *Location `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	// ProviderUID must return the unique identifier of the provider on which the
	// Device publishes this Channel. This is a required field.
	ProviderUid string `protobuf:"bytes,7,opt,name=provider_uid,json=providerUid,proto3" json:"provider_uid,omitempty"`
	// Metadata contains an optional list of metadata about the Channel
	Metadata []*Metadata `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// Visibility returns the visibility status of the Channel. Can be one of OPEN
	// - open API freely accessible with no authentication, SHARED - available via
	// a public API provided suitable authentication is supplied, or CLOSED - only
	// available via a private API. This is a required field.
	Visibility Visibility `protobuf:"varint,9,opt,name=visibility,proto3,enum=thingfulx.protobuf.Visibility" json:"visibility,omitempty"`
	// DataLicence returns the unique identifying URL of a specific data license
	// that the data provider has chosen to apply to their data. This is an
	// optional field.
	DataLicence *DataLicense `protobuf:"bytes,10,opt,name=data_licence,json=dataLicence,proto3" json:"data_licence,omitempty"`
	// Attributions contains a list of attributions we require to add to a
	// channel. Typically there will only be one, but some providers may require
	// multiple attributions.
	Attributions []*Attribution `protobuf:"bytes,11,rep,name=attributions,proto3" json:"attributions,omitempty"`
	// UpdateInterval returns the update frequency of the data resource expressed
	// as an integer number of seconds.
	UpdateInterval int32 `protobuf:"varint,12,opt,name=update_interval,json=updateInterval,proto3" json:"update_interval,omitempty"`
	// QuantityKind is used to describe the specific physical quantity kind this
	// channel measures. This will be expressed as a namespaced string, i.e.
	// m3-lite:AirTemperature where this compressed string can be expanded to URL
	// that uniquely identifies the quantity kind.
	QuantityKind string `protobuf:"bytes,13,opt,name=quantity_kind,json=quantityKind,proto3" json:"quantity_kind,omitempty"`
	// Unit is used to describe the unit in which the Channel publishes its data.
	// This will be expressed as a namespaced string, i.e. m3-lite:DegreeCelsius
	// which can be expanded to a URL that uniqely identifies the unit, and can be
	// used to obtain the symbol or to do conversions.
	Unit string `protobuf:"bytes,14,opt,name=unit,proto3" json:"unit,omitempty"`
	// DomainOfInterest is used to describe the broad category of the channel, and
	// as above will be expressed as a namespaced string, i.e.
	// m3-lite:Environment, which as above can be expanded.
	DomainOfInterest []string `protobuf:"bytes,15,rep,name=domain_of_interest,json=domainOfInterest,proto3" json:"domain_of_interest,omitempty"`
	// MeasuredBy is used to describe the type of sensor that was used to obtain
	// the channel's data. Expressed as a namespaced string, i.e.
	// m3-lite:Seismometer.
	MeasuredBy string `protobuf:"bytes,16,opt,name=measured_by,json=measuredBy,proto3" json:"measured_by,omitempty"`
	// DataType is used to encode the type of the value contained in each
	// observation.
	DataType DataType `protobuf:"varint,17,opt,name=data_type,json=dataType,proto3,enum=thingfulx.protobuf.DataType" json:"data_type,omitempty"`
	// Observations returns a list of data observation values that represent
	// concrete data recordings for the Channel.
	Observations         []*Observation `protobuf:"bytes,18,rep,name=observations,proto3" json:"observations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_6eb5b11d5b15e5ec, []int{0}
}

func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Channel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Channel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Channel) GetWebpage() string {
	if m != nil {
		return m.Webpage
	}
	return ""
}

func (m *Channel) GetIndexedAt() string {
	if m != nil {
		return m.IndexedAt
	}
	return ""
}

func (m *Channel) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Channel) GetProviderUid() string {
	if m != nil {
		return m.ProviderUid
	}
	return ""
}

func (m *Channel) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Channel) GetVisibility() Visibility {
	if m != nil {
		return m.Visibility
	}
	return Visibility_OPEN
}

func (m *Channel) GetDataLicence() *DataLicense {
	if m != nil {
		return m.DataLicence
	}
	return nil
}

func (m *Channel) GetAttributions() []*Attribution {
	if m != nil {
		return m.Attributions
	}
	return nil
}

func (m *Channel) GetUpdateInterval() int32 {
	if m != nil {
		return m.UpdateInterval
	}
	return 0
}

func (m *Channel) GetQuantityKind() string {
	if m != nil {
		return m.QuantityKind
	}
	return ""
}

func (m *Channel) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Channel) GetDomainOfInterest() []string {
	if m != nil {
		return m.DomainOfInterest
	}
	return nil
}

func (m *Channel) GetMeasuredBy() string {
	if m != nil {
		return m.MeasuredBy
	}
	return ""
}

func (m *Channel) GetDataType() DataType {
	if m != nil {
		return m.DataType
	}
	return DataType_NUMBER
}

func (m *Channel) GetObservations() []*Observation {
	if m != nil {
		return m.Observations
	}
	return nil
}

// Attribution is a message type used to add attributions to a Channel.
type Attribution struct {
	// Name is the name of at attribution
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// URL  is the URL of  the attribution
	URL                  string   `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Attribution) Reset()         { *m = Attribution{} }
func (m *Attribution) String() string { return proto.CompactTextString(m) }
func (*Attribution) ProtoMessage()    {}
func (*Attribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_6eb5b11d5b15e5ec, []int{1}
}

func (m *Attribution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attribution.Unmarshal(m, b)
}
func (m *Attribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attribution.Marshal(b, m, deterministic)
}
func (m *Attribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribution.Merge(m, src)
}
func (m *Attribution) XXX_Size() int {
	return xxx_messageInfo_Attribution.Size(m)
}
func (m *Attribution) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribution.DiscardUnknown(m)
}

var xxx_messageInfo_Attribution proto.InternalMessageInfo

func (m *Attribution) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attribution) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

// Location is a message type used to describe a physical location
type Location struct {
	// Longitude contains the decimal longitude of a geographical location
	Longitude float32 `protobuf:"fixed32,1,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Latitude contains the decimal latitude of a geographical location
	Latitude float32 `protobuf:"fixed32,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Elevation contains the elevation of a geographical location expressed as
	// metres above sea level if available
	Elevation            float32  `protobuf:"fixed32,3,opt,name=elevation,proto3" json:"elevation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_6eb5b11d5b15e5ec, []int{2}
}

func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Location) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetElevation() float32 {
	if m != nil {
		return m.Elevation
	}
	return 0
}

// Metadata is a message type used to describe arbitrary metadata properties for
// a Channel
type Metadata struct {
	// Property contains a namespaced property of a channel that we wish to describe.
	Property string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	// Value contains the value we wish to assign to that property in order to
	// correctly describe some aspect of the Channel
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_6eb5b11d5b15e5ec, []int{3}
}

func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata.Unmarshal(m, b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return xxx_messageInfo_Metadata.Size(m)
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetProperty() string {
	if m != nil {
		return m.Property
	}
	return ""
}

func (m *Metadata) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Observation is a messages used to record a single data value at a point in
// time for a channel
type Observation struct {
	// RecordedAt records the timestamp at which the observation was recorded in
	// UTC and expressed as an RFC3339 string.
	RecordedAt string `protobuf:"bytes,1,opt,name=recorded_at,json=recordedAt,proto3" json:"recorded_at,omitempty"`
	// Each Observation must include its own location as this allows us to place
	// an observation in a particular place at a particular time which may be
	// different from the current location of the Channel.
	Location *Location `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// Value includes the actual value of the Observation at the instant of time
	// encoded as a string.
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Observation) Reset()         { *m = Observation{} }
func (m *Observation) String() string { return proto.CompactTextString(m) }
func (*Observation) ProtoMessage()    {}
func (*Observation) Descriptor() ([]byte, []int) {
	return fileDescriptor_6eb5b11d5b15e5ec, []int{4}
}

func (m *Observation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Observation.Unmarshal(m, b)
}
func (m *Observation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Observation.Marshal(b, m, deterministic)
}
func (m *Observation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Observation.Merge(m, src)
}
func (m *Observation) XXX_Size() int {
	return xxx_messageInfo_Observation.Size(m)
}
func (m *Observation) XXX_DiscardUnknown() {
	xxx_messageInfo_Observation.DiscardUnknown(m)
}

var xxx_messageInfo_Observation proto.InternalMessageInfo

func (m *Observation) GetRecordedAt() string {
	if m != nil {
		return m.RecordedAt
	}
	return ""
}

func (m *Observation) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Observation) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// DataLicense is a message used to describe the properties of a data license
type DataLicense struct {
	// Name is a human friendly label or name for the data license.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Url is a unique identifier for the license that should also be the URL
	// where the text of the license is available.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// LegalCodeUrl is a link to a long or legal version of the license. This may
	// be the same as the above URL if no more detailed version is available.
	LegalCodeUrl string `protobuf:"bytes,3,opt,name=legal_code_url,json=legalCodeUrl,proto3" json:"legal_code_url,omitempty"`
	// Permits is a list of properties which define what usage the license permits.
	Permits []string `protobuf:"bytes,4,rep,name=permits,proto3" json:"permits,omitempty"`
	// Requires is a list of properties which define what requirements the license
	// has.
	Requires []string `protobuf:"bytes,5,rep,name=requires,proto3" json:"requires,omitempty"`
	// Permits is a list of properties which define what the license prohibits
	Prohibits            []string `protobuf:"bytes,6,rep,name=prohibits,proto3" json:"prohibits,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataLicense) Reset()         { *m = DataLicense{} }
func (m *DataLicense) String() string { return proto.CompactTextString(m) }
func (*DataLicense) ProtoMessage()    {}
func (*DataLicense) Descriptor() ([]byte, []int) {
	return fileDescriptor_6eb5b11d5b15e5ec, []int{5}
}

func (m *DataLicense) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataLicense.Unmarshal(m, b)
}
func (m *DataLicense) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataLicense.Marshal(b, m, deterministic)
}
func (m *DataLicense) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataLicense.Merge(m, src)
}
func (m *DataLicense) XXX_Size() int {
	return xxx_messageInfo_DataLicense.Size(m)
}
func (m *DataLicense) XXX_DiscardUnknown() {
	xxx_messageInfo_DataLicense.DiscardUnknown(m)
}

var xxx_messageInfo_DataLicense proto.InternalMessageInfo

func (m *DataLicense) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataLicense) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DataLicense) GetLegalCodeUrl() string {
	if m != nil {
		return m.LegalCodeUrl
	}
	return ""
}

func (m *DataLicense) GetPermits() []string {
	if m != nil {
		return m.Permits
	}
	return nil
}

func (m *DataLicense) GetRequires() []string {
	if m != nil {
		return m.Requires
	}
	return nil
}

func (m *DataLicense) GetProhibits() []string {
	if m != nil {
		return m.Prohibits
	}
	return nil
}

func init() {
	proto.RegisterEnum("thingfulx.protobuf.Visibility", Visibility_name, Visibility_value)
	proto.RegisterEnum("thingfulx.protobuf.DataType", DataType_name, DataType_value)
	proto.RegisterType((*Channel)(nil), "thingfulx.protobuf.Channel")
	proto.RegisterType((*Attribution)(nil), "thingfulx.protobuf.Attribution")
	proto.RegisterType((*Location)(nil), "thingfulx.protobuf.Location")
	proto.RegisterType((*Metadata)(nil), "thingfulx.protobuf.Metadata")
	proto.RegisterType((*Observation)(nil), "thingfulx.protobuf.Observation")
	proto.RegisterType((*DataLicense)(nil), "thingfulx.protobuf.DataLicense")
}

func init() { proto.RegisterFile("channels.proto", fileDescriptor_6eb5b11d5b15e5ec) }

var fileDescriptor_6eb5b11d5b15e5ec = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5b, 0x8f, 0xe3, 0x34,
	0x14, 0xde, 0x5e, 0x27, 0x39, 0xe9, 0x74, 0x83, 0xc5, 0x83, 0x85, 0x06, 0xb6, 0x14, 0x24, 0xaa,
	0x15, 0x9a, 0x87, 0xdd, 0x17, 0x90, 0x10, 0x52, 0x2f, 0xd1, 0x52, 0x6d, 0x27, 0x45, 0x9e, 0x16,
	0x24, 0x5e, 0x22, 0x27, 0x76, 0x3b, 0x16, 0x69, 0x92, 0x75, 0x9c, 0xb2, 0x7d, 0xe1, 0x9f, 0xf0,
	0x13, 0xf8, 0x8f, 0xc8, 0xce, 0xa5, 0x1d, 0x98, 0x79, 0xe0, 0xed, 0x9c, 0xef, 0x5c, 0xec, 0xf3,
	0xf9, 0x7c, 0x86, 0x61, 0xf4, 0x40, 0x93, 0x84, 0xc7, 0xf9, 0x6d, 0x26, 0x53, 0x95, 0x22, 0xa4,
	0x1e, 0x44, 0xb2, 0xdf, 0x15, 0xf1, 0xc7, 0x12, 0x08, 0x8b, 0xdd, 0xf8, 0xaf, 0x3e, 0x5c, 0xcd,
	0xcb, 0x34, 0xe4, 0x42, 0xa7, 0x90, 0x31, 0x6e, 0x8d, 0x5a, 0x13, 0x9b, 0x68, 0x13, 0x7d, 0x0a,
	0x3d, 0x25, 0x54, 0xcc, 0x71, 0xdb, 0x60, 0xa5, 0x83, 0x46, 0xe0, 0x30, 0x9e, 0x47, 0x52, 0x64,
	0x4a, 0xa4, 0x09, 0xee, 0x98, 0xd8, 0x25, 0x84, 0x30, 0x5c, 0xfd, 0xc1, 0xc3, 0x8c, 0xee, 0x39,
	0xee, 0x9a, 0x68, 0xed, 0xa2, 0xcf, 0x01, 0x44, 0xc2, 0xf8, 0x47, 0xce, 0x02, 0xaa, 0x70, 0xcf,
	0x04, 0xed, 0x0a, 0x99, 0x2a, 0xf4, 0x1d, 0x58, 0x71, 0x1a, 0x51, 0xd3, 0xb7, 0x3f, 0x6a, 0x4d,
	0x9c, 0x37, 0x37, 0xb7, 0xff, 0xbd, 0xf5, 0xed, 0xaa, 0xca, 0x21, 0x4d, 0x36, 0xfa, 0x12, 0x06,
	0x99, 0x4c, 0x8f, 0x82, 0x71, 0x19, 0x14, 0x82, 0xe1, 0xab, 0xf2, 0x56, 0x35, 0xb6, 0x15, 0x4c,
	0x37, 0x3f, 0x70, 0x45, 0x19, 0x55, 0x14, 0x5b, 0xa3, 0xce, 0x73, 0xcd, 0xef, 0xaa, 0x1c, 0xd2,
	0x64, 0xa3, 0x1f, 0x01, 0x8e, 0x22, 0x17, 0xa1, 0x88, 0x85, 0x3a, 0x61, 0x7b, 0xd4, 0x9a, 0x0c,
	0xdf, 0x7c, 0xf1, 0x54, 0xed, 0x2f, 0x4d, 0x16, 0xb9, 0xa8, 0x40, 0x33, 0x18, 0xe8, 0x3e, 0x41,
	0x2c, 0x22, 0x9e, 0x44, 0x1c, 0x83, 0x19, 0xed, 0xd5, 0x53, 0x1d, 0x16, 0x54, 0xd1, 0x95, 0x4e,
	0xcb, 0x39, 0x71, 0x58, 0xed, 0x44, 0x1c, 0xcd, 0x61, 0x40, 0x95, 0x92, 0x22, 0x2c, 0xf4, 0xbc,
	0x39, 0x76, 0xcc, 0x04, 0x4f, 0xf6, 0x98, 0x9e, 0xf3, 0xc8, 0xa3, 0x22, 0xf4, 0x0d, 0xbc, 0x2c,
	0x32, 0x46, 0x15, 0x0f, 0x44, 0xa2, 0xb8, 0x3c, 0xd2, 0x18, 0x0f, 0x46, 0xad, 0x49, 0x8f, 0x0c,
	0x4b, 0x78, 0x59, 0xa1, 0xe8, 0x2b, 0xb8, 0xfe, 0x50, 0xd0, 0x44, 0x09, 0x75, 0x0a, 0x7e, 0x17,
	0x09, 0xc3, 0xd7, 0x86, 0xcf, 0x41, 0x0d, 0xbe, 0x17, 0x09, 0x43, 0x08, 0xba, 0x45, 0x22, 0x14,
	0x1e, 0x9a, 0x98, 0xb1, 0xd1, 0xb7, 0x80, 0x58, 0x7a, 0xa0, 0x22, 0x09, 0xd2, 0x5d, 0x79, 0x08,
	0xcf, 0x15, 0x7e, 0x39, 0xea, 0x4c, 0x6c, 0xe2, 0x96, 0x91, 0xf5, 0x6e, 0x59, 0xe1, 0xe8, 0x15,
	0x38, 0x07, 0x4e, 0xf3, 0x42, 0x72, 0x16, 0x84, 0x27, 0xec, 0x9a, 0x46, 0x50, 0x43, 0xb3, 0x13,
	0xfa, 0x1e, 0x6c, 0xc3, 0x9c, 0x3a, 0x65, 0x1c, 0x7f, 0x62, 0x88, 0xbf, 0x79, 0x8e, 0xb6, 0xcd,
	0x29, 0xe3, 0xc4, 0x62, 0x95, 0xa5, 0x09, 0x4b, 0xc3, 0x5c, 0x8f, 0x53, 0x12, 0x86, 0x9e, 0x27,
	0x6c, 0x7d, 0xce, 0x23, 0x8f, 0x8a, 0xc6, 0x6f, 0xc1, 0xb9, 0x60, 0x53, 0x4f, 0xec, 0xd3, 0x03,
	0xaf, 0x34, 0x62, 0x6c, 0x2d, 0x9b, 0x2d, 0x59, 0x55, 0x12, 0xd1, 0xe6, 0x38, 0x04, 0xab, 0xde,
	0x50, 0x74, 0x03, 0x76, 0x9c, 0x26, 0x7b, 0xa1, 0x0a, 0x56, 0x96, 0xb5, 0xc9, 0x19, 0x40, 0x9f,
	0x81, 0x15, 0x53, 0x55, 0x06, 0xdb, 0x26, 0xd8, 0xf8, 0xba, 0x92, 0xc7, 0xbc, 0xbc, 0x88, 0x11,
	0x59, 0x9b, 0x9c, 0x81, 0xf1, 0x0f, 0x60, 0xd5, 0x8b, 0xaa, 0xbb, 0x64, 0x32, 0xcd, 0xb8, 0x54,
	0xa7, 0xea, 0x66, 0x8d, 0xaf, 0x25, 0x7c, 0xa4, 0x71, 0xd1, 0x48, 0xd8, 0x38, 0xe3, 0x3f, 0xc1,
	0xb9, 0x98, 0x59, 0x3f, 0x83, 0xe4, 0x51, 0x2a, 0x59, 0x29, 0xcb, 0xb2, 0x07, 0xd4, 0xd0, 0xbf,
	0x74, 0xd9, 0xfe, 0x5f, 0xba, 0x6c, 0xce, 0xef, 0x5c, 0x9e, 0xff, 0x77, 0x0b, 0x9c, 0x8b, 0x4d,
	0xd7, 0xbc, 0x26, 0x17, 0xbc, 0x26, 0x15, 0xaf, 0xfa, 0x3b, 0x6a, 0x9f, 0xbf, 0xa3, 0xaf, 0x61,
	0x18, 0xf3, 0x3d, 0x8d, 0x83, 0x28, 0x65, 0x3c, 0xd0, 0xc1, 0xb2, 0xe9, 0xc0, 0xa0, 0xf3, 0x94,
	0xf1, 0xad, 0x8c, 0xf5, 0xe7, 0x93, 0x71, 0x79, 0x10, 0x2a, 0xc7, 0x5d, 0xb3, 0x76, 0xb5, 0xab,
	0x79, 0x92, 0xfc, 0x43, 0x21, 0x24, 0xcf, 0x71, 0xcf, 0x84, 0x1a, 0x5f, 0xb3, 0x9d, 0xc9, 0xf4,
	0x41, 0x84, 0xba, 0xae, 0x6f, 0x82, 0x67, 0xe0, 0xf5, 0x2d, 0xc0, 0x59, 0xda, 0xc8, 0x82, 0xee,
	0xfa, 0x67, 0xcf, 0x77, 0x5f, 0x20, 0x80, 0xfe, 0xfd, 0x4f, 0x53, 0xe2, 0x2d, 0xdc, 0x96, 0xb6,
	0xe7, 0xab, 0xf5, 0xbd, 0xb7, 0x70, 0x3b, 0xaf, 0x43, 0xb0, 0xea, 0x8d, 0xd4, 0xb8, 0xbf, 0xbd,
	0x9b, 0x79, 0xc4, 0x7d, 0x81, 0x1c, 0xb8, 0x5a, 0xfa, 0x1b, 0xef, 0x9d, 0x47, 0xca, 0x82, 0xfb,
	0x0d, 0x59, 0xfa, 0xef, 0xdc, 0x36, 0xba, 0x06, 0x7b, 0x31, 0xdd, 0x78, 0xc1, 0x66, 0x79, 0xe7,
	0xb9, 0x1d, 0x7d, 0x82, 0xb1, 0xba, 0xba, 0x62, 0xb6, 0x5e, 0xaf, 0xbc, 0xa9, 0xef, 0xf6, 0xb4,
	0xb3, 0xf5, 0xdf, 0xfb, 0xeb, 0x5f, 0x7d, 0xb7, 0x3f, 0x73, 0x7e, 0xb3, 0x9b, 0x27, 0x08, 0xfb,
	0xe6, 0x0d, 0xde, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x13, 0xf3, 0xbc, 0xf8, 0xf4, 0x05, 0x00,
	0x00,
}
